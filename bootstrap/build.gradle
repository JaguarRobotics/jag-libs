apply plugin: "eclipse"
apply plugin: "java"

repositories {
	jcenter()
	mavenCentral()
    maven {
        url "http://first.wpi.edu/FRC/roborio/maven/release/"
    }
    maven {
    	url "https://repo.eclipse.org/content/repositories/paho-releases"
    }
}

configurations {
	library
}

dependencies {
    compile "edu.wpi.first.wpilib.networktables.java:NetworkTables:3.0.0-SNAPSHOT"
    compile "edu.wpi.first.wpilibj:wpilibJavaFinal:0.1.0-SNAPSHOT"
    library "io.moquette:moquette-broker:0.10"
    library rootProject
}

sourceSets {
    main {
        java {
            srcDirs = [
                "src/"
            ]
        }
        compileClasspath += configurations.library
    }
}

eclipse {
	classpath {
		plusConfigurations << configurations.library
	}
    project {
        name = "JagLibs Bootstrap"
        natures "edu.wpi.first.wpilib.plugins.core.nature.FRCProjectNature"
    }
}

ant.importBuild("build.xml") { target ->
    target == "deploy" ? "deploy" : "wpi_" + target
}

File wpi = new File(System.getProperty("user.home"), "wpilib/user/java/lib")

task cleanJagLibs(type: Delete) {
	delete new File(wpi, "jaglibs.jar")
}

task copyLibs(type: CopyLibsTask) {
	dependsOn ":jar"
	dependsOn cleanJagLibs
}

wpi_compile {
	dependsOn copyLibs
}

build {
	dependsOn copyLibs
}

import java.util.jar.JarEntry
import java.util.jar.JarInputStream
import java.util.jar.JarOutputStream

class CopyLibsTask extends DefaultTask {
	@TaskAction
	def run() {
		File wpi = new File(System.getProperty("user.home"), "wpilib/user/java/lib")
		project.configurations.library.each { src ->
			File target = new File(wpi, src.getName())
			if (!target.exists()) {
				JarInputStream jin = new JarInputStream(new FileInputStream(src))
				JarOutputStream jout = new JarOutputStream(new FileOutputStream(target))
				try {
					JarEntry ent;
					while ((ent = jin.getNextJarEntry()) != null) {
						if (!ent.isDirectory() && (!ent.getName().startsWith("META-INF") || !(ent.getName().endsWith(".SF") || ent.getName().endsWith(".RSA")))) {
							jout.putNextEntry(ent)
							jout << jin
							jout.closeEntry()
						}
					}
				} finally {
					jout.close()
					jin.close()
				}
			}
		}
	}
}
